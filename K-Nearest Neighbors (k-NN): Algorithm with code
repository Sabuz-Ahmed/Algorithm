import numpy as np
from collections import Counter

def euclidean_distance(x1, x2):
    """Calculates the Euclidean distance between two points."""
    return np.sqrt(np.sum((x1 - x2)**2))

class KNN:
    def __init__(self, k=3):
        """Initializes the KNN classifier with k neighbors."""
        self.k = k

    def fit(self, X, y):
        """Stores the training data and labels."""
        self.X_train = X
        self.y_train = y

    def predict(self, X):
        """Predicts the labels for the input data."""
        predicted_labels = [self._predict(x) for x in X]
        return np.array(predicted_labels)

    def _predict(self, x):
        """Predicts the label for a single data point."""
        # Calculate distances
        distances = [euclidean_distance(x, x_train) for x_train in self.X_train]

        # Get k nearest neighbors
        k_indices = np.argsort(distances)[:self.k]
        k_nearest_labels = [self.y_train[i] for i in k_indices]

        # Get the most common class label
        most_common = Counter(k_nearest_labels).most_common(1)
        return most_common[0][0]

# Example usage:
if __name__ == "__main__":
    # Sample data
    X_train = np.array([[1, 2], [2, 3], [3, 1], [6, 5], [7, 8], [8, 7]])
    y_train = np.array([0, 0, 0, 1, 1, 1])

    X_test = np.array([[2, 2], [5, 6]])

    # Create and train the KNN classifier
    knn = KNN(k=3)
    knn.fit(X_train, y_train)

    # Make predictions
    predictions = knn.predict(X_test)
    print(predictions) # Output: [0 1]
