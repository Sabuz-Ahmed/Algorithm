import math

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def is_winner(board, player):
    # Check rows, columns, and diagonals
    for i in range(3):
        if all(board[i][j] == player for j in range(3)) or \
           all(board[j][i] == player for j in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or \
       all(board[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_board_full(board):
    return all(board[i][j] != " " for i in range(3) for j in range(3))

def get_available_moves(board):
    moves = []
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                moves.append((i, j))
    return moves

def minimax(board, depth, maximizing_player):
    if is_winner(board, "X"):
        return -1
    if is_winner(board, "O"):
        return 1
    if is_board_full(board):
        return 0

    if maximizing_player:
        max_eval = -math.inf
        for move in get_available_moves(board):
            board[move[0]][move[1]] = "O"
            eval = minimax(board, depth + 1, False)
            board[move[0]][move[1]] = " " # Undo the move
            max_eval = max(max_eval, eval)
        return max_eval
    else:
        min_eval = math.inf
        for move in get_available_moves(board):
            board[move[0]][move[1]] = "X"
            eval = minimax(board, depth + 1, True)
            board[move[0]][move[1]] = " " # Undo the move
            min_eval = min(min_eval, eval)
        return min_eval

def find_best_move(board):
    best_move = None
    best_eval = -math.inf
    for move in get_available_moves(board):
        board[move[0]][move[1]] = "O"
        eval = minimax(board, 0, False)
        board[move[0]][move[1]] = " " # Undo the move
        if eval > best_eval:
            best_eval = eval
            best_move = move
    return best_move

def play_game():
    board = [[" " for _ in range(3)] for _ in range(3)]
    player_turn = "X"

    while True:
        print_board(board)

        if player_turn == "X":
            while True:
                try:
                    row = int(input("Enter row (0, 1, 2): "))
                    col = int(input("Enter column (0, 1, 2): "))
                    if 0 <= row <= 2 and 0 <= col <= 2 and board[row][col] == " ":
                        board[row][col] = "X"
                        break
                    else:
                        print("Invalid move. Try again.")
                except ValueError:
                    print("Invalid input. Enter numbers.")
        else:
            print("Computer's turn (O):")
            best_move = find_best_move(board)
            if best_move:
                board[best_move[0]][best_move[1]] = "O"
            else:
                print("Game over (Draw).")
                break

        if is_winner(board, player_turn):
            print_board(board)
            print(f"{player_turn} wins!")
            break
        elif is_board_full(board):
            print_board(board)
            print("It's a draw!")
            break

        player_turn = "O" if player_turn == "X" else "X"

if __name__ == "__main__":
    play_game()
