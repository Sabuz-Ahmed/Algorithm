import tensorflow as tf
from tensorflow.keras import layers, models, applications

def create_xception(input_shape, num_classes):
    """
    Creates an Xception model with a custom classification head.

    Args:
        input_shape: Tuple representing the shape of the input images (e.g., (224, 224, 3)).
        num_classes: Number of output classes for classification.

    Returns:
        A TensorFlow Keras model.
    """

    # Load the pre-trained Xception model (excluding top layers)
    base_model = applications.Xception(weights='imagenet', include_top=False, input_shape=input_shape)

    # Freeze the base model layers
    for layer in base_model.layers:
        layer.trainable = False

    # Add custom classification head
    inputs = layers.Input(shape=input_shape)
    x = base_model(inputs, training=False)  # Important: set training=False after freezing!
    x = layers.GlobalAveragePooling2D()(x)
    x = layers.Dense(1024, activation='relu')(x)
    x = layers.Dropout(0.5)(x)
    outputs = layers.Dense(num_classes, activation='softmax')(x)

    model = models.Model(inputs, outputs)

    return model

def compile_and_train(model, train_images, train_labels, test_images, test_labels, epochs=10, batch_size=32):
    """
    Compiles and trains the Xception model using Adam optimizer.

    Args:
        model: The Xception model to train.
        train_images: Training images.
        train_labels: Training labels.
        test_images: Test images.
        test_labels: Test labels.
        epochs: Number of epochs to train for.
        batch_size: batch size for training
    """
    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy', #Use categorical_crossentropy if labels are one-hot encoded
                  metrics=['accuracy'])

    model.fit(train_images, train_labels, epochs=epochs, batch_size=batch_size,
              validation_data=(test_images, test_labels))

    test_loss, test_acc = model.evaluate(test_images, test_labels)
    print(f'Test accuracy: {test_acc}')

# Example Usage (using a dummy dataset, replace with your actual data):
if __name__ == "__main__":
    # Example dummy data (replace with your image loading and preprocessing)
    import numpy as np
    input_shape = (224, 224, 3)
    num_classes = 10
    num_train_samples = 100
    num_test_samples = 50

    train_images = np.random.rand(num_train_samples, *input_shape).astype('float32')
    train_labels = np.random.randint(0, num_classes, size=num_train_samples)
    test_images = np.random.rand(num_test_samples, *input_shape).astype('float32')
    test_labels = np.random.randint(0, num_classes, size=num_test_samples)

    model = create_xception(input_shape, num_classes)
    compile_and_train(model, train_images, train_labels, test_images, test_labels, epochs=5, batch_size=16) #Reduced epochs and batch size.
